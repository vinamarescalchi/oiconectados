#include <WiFi.h>
#include <PubSubClient.h>
 
#define WIFISSID "ALLEMAO"      // Colocado o wifi da residencia da aluna Raquel Allemao
#define PASSWORD "123456" // Colocado a senha do wi-fi da residencia (senha simulada)
#define TOKEN "BBFF-XHndJYqgYEyhrfhp3T3Rcy7RgirN9p" // Colocado o TOKEN do ubidots 
#define MQTT_CLIENT_NAME "raquelallemao"               // Nome do cliente MQTT;
                                                  
#define VARIABLE_LABEL "sensor" // Atribuido o rótulo da variável
#define DEVICE_LABEL "esp32"    // Atribuido o rótulo do dispositivo
 
#define SENSOR A0 // A0 foi definido como sensor. ou seja os eletrodos.
 
char mqttBroker[]  = "industrial.api.ubidots.com";
char payload[100];
char topic[150];
// Espaço para armazenar valores para enviar
char str_sensor[10];

WiFiClient ubidots;
PubSubClient client(ubidots);
 
void callback(char* topic, byte* payload, unsigned int length) {
  char p[length + 1];
  memcpy(p, payload, length);
  p[length] = NULL;
  Serial.write(payload, length);
  Serial.println(topic);
}
 
void reconnect() {
  // Loop até estarmos reconectados
  while (!client.connected()) {
    Serial.println("Tentando conexão MQTT...");
    
    //Tentativa de conexão
    if (client.connect(MQTT_CLIENT_NAME, TOKEN, "")) {
      Serial.println("Connected");
    } else {
      Serial.print("Failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 2 seconds");
      // Wait 2 seconds before retrying
      delay(2000);
    }
  }
}
 
void setup() {
  Serial.begin(115200);
  WiFi.begin(WIFISSID, PASSWORD);
  // Atribua o pino como INPUT
  pinMode(SENSOR, INPUT);
 
  Serial.println();
  Serial.print("Esperando por WiFi ...");
  
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  
  Serial.println("");
  Serial.println("WiFi conectado");
  Serial.println("Endereço de IP:");
  Serial.println(WiFi.localIP());
  client.setServer(mqttBroker, 1883);
  client.setCallback(callback);  
}
 
void loop() {
  if (!client.connected()) {
    reconnect();
  }
 
  sprintf(topic, "%s%s", "/v1.6/devices/", DEVICE_LABEL);
  sprintf(payload, "%s", ""); // Cleans the payload
  sprintf(payload, "{\"%s\":", VARIABLE_LABEL); // Adiciona o rótulo da variável
  
  float sensor = analogRead(SENSOR); 
  
  /4 é a largura mínima, 2 é a precisão; valor flutuante é copiado para str_sensor/
  dtostrf(sensor, 4, 2, str_sensor);
  
  sprintf(payload, "%s {\"value\": %s}}", payload, str_sensor); // Adds the value
  Serial.println("Publicação de dados na nuvem Ubidots");
  client.publish(topic, payload);
  client.loop();
  delay(500);
}
